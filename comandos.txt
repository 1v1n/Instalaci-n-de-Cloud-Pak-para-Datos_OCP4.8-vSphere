oc new-project ${PROJECT_CPFS_OPS}
oc new-project ${PROJECT_CPD_OPS}
oc new-project ${PROJECT_CPD_INSTANCE}




cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1alpha2
kind: OperatorGroup
metadata:
  name: operatorgroup
  namespace: ${PROJECT_CPFS_OPS}
spec:
  targetNamespaces:
  - ${PROJECT_CPFS_OPS}
EOF



cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1alpha2
kind: OperatorGroup
metadata:
  name: operatorgroup
  namespace: ${PROJECT_CPFS_OPS}
spec:
  targetNamespaces:
  - ${PROJECT_CPFS_OPS}
EOF


cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1alpha2
kind: OperatorGroup
metadata:
  name: operatorgroup
  namespace: ${PROJECT_CPD_OPS}
spec:
  targetNamespaces:
  - ${PROJECT_CPD_OPS}
EOF





export WORK_ROOT=$HOME/temp/work


oc get secret/pull-secret \
  -n openshift-config \
  --template='{{index .data ".dockerconfigjson" | base64decode}}' > ${WORK_ROOT}/global_pull_secret.cfg



  
  oc registry login \
    --registry="${IBM_ENTITLEMENT_SERVER}" \
    --auth-basic="${IBM_ENTITLEMENT_USER}:${IBM_ENTITLEMENT_KEY}" \
    --to=${WORK_ROOT}/global_pull_secret.cfg


    oc set data secret/pull-secret \
    -n openshift-config \
    --from-file=.dockerconfigjson=${WORK_ROOT}/global_pull_secret.cfg


    oc get nodes




oc get catalogsource -n ${PROJECT_CATSRC} opencloud-operators



cloudctl case launch \
  --case ${OFFLINEDIR_CPFS}/ibm-cp-common-services-1.13.0.tgz \
  --inventory ibmCommonServiceOperatorSetup \
  --namespace ${PROJECT_CATSRC} \
  --action install-catalog \
    --args "--registry icr.io --inputDir ${PROJECT_CATSRC} --recursive"



oc get catalogsource -n ${PROJECT_CATSRC} opencloud-operators \
-o jsonpath='{.status.connectionState.lastObservedState} {"\n"}'



cloudctl case launch \
  --case ${OFFLINEDIR_CPD}/ibm-cpd-scheduling-1.3.4.tgz \
  --inventory schedulerSetup \
  --namespace ${PROJECT_CATSRC} \
  --action install-catalog \
    --args "--inputDir ${OFFLINEDIR_CPD} --recursive"


oc get catalogsource -n ${PROJECT_CATSRC} ibm-cpd-scheduling-catalog \
-o jsonpath='{.status.connectionState.lastObservedState} {"\n"}'



cloudctl case launch \
  --case ${OFFLINEDIR_CPD}/ibm-cp-datacore-2.0.13.tgz \
  --inventory cpdPlatformOperator \
  --namespace ${PROJECT_CATSRC} \
  --action install-catalog \
    --args "--inputDir ${OFFLINEDIR_CPD} --recursive"


oc get catalogsource -n ${PROJECT_CATSRC} cpd-platform \
-o jsonpath='{.status.connectionState.lastObservedState} {"\n"}'


cloudctl case launch \
  --case ${OFFLINEDIR_CPD}/ibm-db2uoperator-4.0.11.tgz \
  --inventory db2uOperatorSetup \
  --namespace ${PROJECT_CATSRC} \
  --action install-catalog \
    --args "--inputDir ${OFFLINEDIR_CPD} --recursive"



oc get catalogsource -n ${PROJECT_CATSRC} ibm-db2uoperator-catalog \
-o jsonpath='{.status.connectionState.lastObservedState} {"\n"}'


cloudctl case launch \
  --case ${OFFLINEDIR_CPD}/ibm-datastage-enterprise-4.0.9.tgz \
  --inventory dsOperatorSetup \
  --namespace ${PROJECT_CATSRC} \
  --action install-catalog \
    --args "--inputDir ${OFFLINEDIR_CPD} --recursive"



oc get catalogsource -n ${PROJECT_CATSRC} ibm-cpd-datastage-operator-catalog \
-o jsonpath='{.status.connectionState.lastObservedState} {"\n"}'




cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: ibm-common-service-operator
  namespace: ${PROJECT_CPFS_OPS}
spec:
  channel: v3
  installPlanApproval: Automatic
  name: ibm-common-service-operator
  source: opencloud-operators
  sourceNamespace: ${PROJECT_CATSRC}
EOF



oc --namespace ${PROJECT_CPFS_OPS} get csv


oc get crd | grep operandrequest



oc api-resources --api-group operator.ibm.com



cat <<EOF |oc apply -f -
apiVersion: operator.ibm.com/v1alpha1
kind: OperandRequest
metadata:
  name: common-service-license
  namespace: ${PROJECT_CPD_INSTANCE}
spec:
  requests:
  - operands:
      - name: ibm-licensing-operator
        bindings:
          public-api-upload:
            secret: ibm-licensing-upload-token
            configmap: ibm-licensing-upload-config
    registry: common-service
    registryNamespace: ${PROJECT_CPFS_OPS}
EOF



oc get opreq common-service-license -n ${PROJECT_CPD_INSTANCE} \
-o jsonpath='{.status.phase}  {"\n"}'


oc get pod -n ${PROJECT_CPFS_OPS} -l app.kubernetes.io/name=ibm-licensing \
-o jsonpath='{.items[0].status.phase} {"\n"}'




cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: ibm-cpd-scheduling-catalog-subscription
  namespace: ${PROJECT_CPFS_OPS}
spec:
  channel: v1.3
  installPlanApproval: ${APPROVAL_TYPE}
  name: ibm-cpd-scheduling-operator
  source: ibm-cpd-scheduling-catalog
  sourceNamespace: ${PROJECT_CATSRC}
EOF



oc get sub -n ${PROJECT_CPFS_OPS} ibm-cpd-scheduling-catalog-subscription \
-o jsonpath='{.status.installedCSV} {"\n"}'



oc get csv -n ${PROJECT_CPFS_OPS} ibm-cpd-scheduling-operator.v1.3.4 \
-o jsonpath='{ .status.phase } : { .status.message} {"\n"}'



oc get deployments -n ${PROJECT_CPFS_OPS} -l olm.owner="ibm-cpd-scheduling-operator.v1.3.4" \
-o jsonpath="{.items[0].status.availableReplicas} {'\n'}"



cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: cpd-operator
  namespace: ${PROJECT_CPD_OPS}
spec:
  channel: v2.0
  installPlanApproval: ${APPROVAL_TYPE}
  name: cpd-platform-operator
  source: cpd-platform
  sourceNamespace: ${PROJECT_CATSRC}
EOF



oc get sub -n ${PROJECT_CPD_OPS} cpd-operator \
-o jsonpath='{.status.installedCSV} {"\n"}'



oc get csv -n ${PROJECT_CPD_OPS} cpd-platform-operator.v2.0.8 \
-o jsonpath='{ .status.phase } : { .status.message} {"\n"}'




oc get deployments -n ${PROJECT_CPD_OPS} -l olm.owner="cpd-platform-operator.v2.0.8" \
-o jsonpath="{.items[0].status.availableReplicas} {'\n'}"



cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: ibm-namespace-scope-operator
  namespace: ${PROJECT_CPD_OPS}
spec:
  channel: v3
  installPlanApproval: ${APPROVAL_TYPE}
  name: ibm-namespace-scope-operator
  source: opencloud-operators
  sourceNamespace: ${PROJECT_CATSRC}
EOF



oc get NamespaceScope -n ${PROJECT_CPD_OPS}



cat <<EOF |oc apply -f -
apiVersion: operator.ibm.com/v1
kind: NamespaceScope
metadata:
  name: cpd-operators
  namespace: ${PROJECT_CPD_OPS} 
spec:
  csvInjector:                    
    enable: true
  namespaceMembers:
  - ${PROJECT_CPD_OPS}
EOF


oc patch NamespaceScope cpd-operators \
-n ${PROJECT_CPD_OPS} \
--type=merge \
--patch='{"spec": {"csvInjector": {"enable": true} } }'



cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata: 
  name: ibm-cpd-datastage-operator-subscription
  namespace: ${PROJECT_CPD_OPS}
spec: 
  channel: v1.0
  installPlanApproval: ${APPROVAL_TYPE} 
  name: ibm-cpd-datastage-operator
  source: ibm-cpd-datastage-operator-catalog
  sourceNamespace: ${PROJECT_CATSRC}
EOF



oc get sub -n ${PROJECT_CPD_OPS} ibm-cpd-datastage-operator-subscription \
-o jsonpath='{.status.installedCSV} {"\n"}'


oc get csv -n ${PROJECT_CPD_OPS} ibm-cpd-datastage-operator.v1.0.6 \
-o jsonpath='{ .status.phase } : { .status.message} {"\n"}'


oc get deployments -n ${PROJECT_CPD_OPS} -l olm.owner="ibm-cpd-datastage-operator.v1.0.6" \
-o jsonpath="{.items[0].status.availableReplicas} {'\n'}"

oc get NamespaceScope -n ${PROJECT_CPD_OPS}

cat <<EOF |oc apply -f -
apiVersion: operator.ibm.com/v1
kind: NamespaceScope
metadata:
  name: cpd-operators
  namespace: ${PROJECT_CPD_OPS}
spec:
  namespaceMembers:
  - ${PROJECT_CPD_OPS}
  - ${PROJECT_CPD_INSTANCE}
EOF


oc patch NamespaceScope cpd-operators \
-n ${PROJECT_CPD_OPS} \
--type json \
--patch "[{ \"op\": \"add\", \"path\": \"/spec/namespaceMembers/0\", \"value\": \"${PROJECT_CPD_INSTANCE}\" }]"


oc get NamespaceScope cpd-operators -n ${PROJECT_CPD_OPS} -o yaml



cat <<EOF |oc apply -f -
apiVersion: cpd.ibm.com/v1
kind: Ibmcpd
metadata:
  name: ibmcpd-cr                        # This is the recommended name, but you can change it
  namespace: ${PROJECT_CPD_INSTANCE}
  csNamespace: ${PROJECT_CPFS_OPS}
spec:
  license:
    accept: true
    license: ${LICENSE_CPD}
  storageClass: managed-nfs-storage
EOF


oc project ${PROJECT_CPD_INSTANCE}



oc get Ibmcpd ibmcpd-cr -o jsonpath="{.status.controlPlaneStatus}{'\n'}"


oc get ZenService lite-cr -o jsonpath="{.status.zenStatus}{'\n'}"


oc get ZenService lite-cr -o jsonpath="{.status.url}{'\n'}"



oc extract secret/admin-user-details --keys=initial_admin_password --to=-



oc patch ZenService lite-cr \
--namespace ${PROJECT_CPD_INSTANCE} \
--type=merge \
--patch '{"spec": {"version":"4.4.3"}}'


oc login OpenShift_URL:port

cat <<EOF |oc apply -f -
apiVersion: ds.cpd.ibm.com/v1alpha1
kind: DataStage
metadata:
  name: datastage     
  namespace: ${PROJECT_CPD_INSTANCE}    # Replace with the project where you will install DataStage
spec:
  license:
    accept: true
    license: ${LICENSE_CPD}
  version: 4.0.8
  storageClass: managed-nfs-storage
EOF



oc project ${PROJECT_CPD_INSTANCE}



oc get DataStage datastage -o jsonpath='{.status.dsStatus} {"\n"}'


oc get pxruntime ds-px-default -o jsonpath='{.status.dsStatus} {"\n"}'
